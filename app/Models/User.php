<?php

namespace App\Models;

use App\Services\StripeHelper;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Fortify\TwoFactorAuthenticatable;
use Laravel\Jetstream\HasProfilePhoto;
use Laravel\Sanctum\HasApiTokens;
use PhpParser\Node\Stmt\Static_;
use Spatie\Permission\Traits\HasRoles;

use App\Models\Company;
use Illuminate\Support\Facades\Storage;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable, HasRoles;
    use HasProfilePhoto;
    use TwoFactorAuthenticatable;

    protected $fillable = [
        'name',
        'email',
        'password',
        'two_factor_secret',
        'two_factor_recovery_codes',
        'two_factor_confirmed_at',
        'id_proof',
        'account_id',
        'street',
        'country_id',
        'city',
        'phone',
        'status',
        'current_team_id',
        'profile_photo_path',
        'stripe_id',
        'stripe_customer_id',
        'pm_type',
        'pm_last_four',
        'trial_ends_at',
        'phone_verification_string',
        'phone_verified',
        'email_verification_string',
        'email_verified',
        'new_email',
        'phone_prefix',
        'field',
        'otp',
        'registration_step',
    ];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::created(function ($model) {
            $stripeHelper = (new StripeHelper($model));
            $stripeHelper->createStripeCustomer();
            //ToDo: uncomment the below line after get the original stripe credentials
            //$stripeHelper->createStripeAccount();
        });
    }

    protected $hidden = [
        'password',
        'remember_token',
        'two_factor_recovery_codes',
        'two_factor_secret',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    protected $appends = [
        'profile_photo_url', 'address', 'avatar',
    ];
    const TYPE_NORMAL = 'normal';
    const TYPE_MICROSOFT = 'microsoft';
    const TYPE_GOOGLE = 'google';
    const TYPE_APPLE = 'apple';

    /**
     * Get the token for the User
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function token()
    : \Illuminate\Database\Eloquent\Relations\HasOne
    {
        return $this->hasOne(UserToken::class, 'user_id', 'id');
    }

    /**
     * Get the personalAccessToken for the User
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function personalAccessToken()
    : \Illuminate\Database\Eloquent\Relations\HasOne
    {
        return $this->hasOne(personalAccessToken::class, 'tokenable_id', 'id');
    }

    /**
     * Get the company associated with the User
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function company()
    : \Illuminate\Database\Eloquent\Relations\HasOne
    {
        return $this->hasOne(Company::class, 'user_id');
    }

    /**
     * Get the counter offer for the User
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function counterOffer()
    : \Illuminate\Database\Eloquent\Relations\HasOne
    {
        return $this->hasOne(CounterOffer::class, 'user_id', 'id');
    }

    /**
     * Get the country associated with the User
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function country()
    : \Illuminate\Database\Eloquent\Relations\belongsTo
    {
        return $this->belongsTo(Country::class, 'country_id');
    }

    /**
     * V1
     * Get the creditCard associated with the User
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function creditCard()
    : \Illuminate\Database\Eloquent\Relations\HasOne
    {
        return $this->hasOne(CardDetail::class, 'user_id')->where('is_primary', true);
    }

    /**
     * V2
     * Get the creditCards associated with the User
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function creditCards()
    : \Illuminate\Database\Eloquent\Relations\HasMany
    {
        return $this->hasMany(CardDetail::class, 'user_id');
    }

    /**
     * V1
     * Get the bankAccount associated with the User
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function bankAccount()
    : \Illuminate\Database\Eloquent\Relations\HasOne
    {
        return $this->hasOne(BankDetail::class, 'user_id')->where('is_primary', 1);
    }

    /**
     * V2
     * Get the bankAccounts associated with the User
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function bankAccounts()
    : \Illuminate\Database\Eloquent\Relations\HasMany
    {
        return $this->hasMany(BankDetail::class, 'user_id');
    }

    public function stripe()
    {
        return $this->hasOne(Stripe::class, 'user_id');
    }

    /**
     * Get all of the certificates for the User
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function certificates()
    : \Illuminate\Database\Eloquent\Relations\HasMany
    {
        return $this->hasMany(Certificate::class, 'user_id');
    }

    /**
     * Get all of the sell certificates for the User
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function sell_certificates()
    : \Illuminate\Database\Eloquent\Relations\HasMany
    {
        return $this->hasMany(SellCertificate::class, 'user_id');
    }

    public function getProfilePhotoPathAttribute()
    {
        if ( !empty($this->attributes['profile_photo_path']) && $this->attributes['profile_photo_path'] && Storage::disk('public')->exists($this->attributes['profile_photo_path']) ) {
            // return  Storage::disk('public')->url($this->attributes['profile_photo_path']);
            return asset('storage/' . $this->attributes['profile_photo_path']);
        } else {
            return asset('images/avatar.png');
        }
    }

    public function getIdProofAttribute()
    {
        if ( !empty($this->attributes['id_proof']) && $this->attributes['id_proof'] && Storage::disk('public')->exists($this->attributes['id_proof']) ) {
            // return  Storage::disk('public')->url($this->attributes['id_proof']);
            return asset('storage/' . $this->attributes['id_proof']);
        } else {
            return asset('images/id_preview.png');
        }
    }

    public function getAddressAttribute()
    {
        $address = $this->attributes['street'];
        if ( $this->attributes['city'] ) {
            $address .= ', ' . $this->attributes['city'];
        }
        if ( $this->country ) {
            $address .= ', ' . $this->country->name;
        }
    }

    public function getAvatarAttribute()
    {
        return asset('images/avatar.png');
    }

    /**
     * Get all of the SocialAccount for the User
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function SocialAccount()
    : \Illuminate\Database\Eloquent\Relations\HasMany
    {
        return $this->hasMany(SocialAccount::class, 'user_id');
    }

    public function notifications(){
        return $this->hasMany(Notification::class, 'notifiable_id');
    }
}
